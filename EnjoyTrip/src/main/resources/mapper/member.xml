<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.enjoytrip.member.model.mapper.MemberMapper">

	<resultMap type="member" id="memberMap">
		<result column="member_no" property="memberNo" />
		<result column="member_id" property="memberId" />
		<result column="member_pw" property="memberPw" />
		<result column="member_name" property="memberName" />
		<result column="join_date" property="joinDate" />
		<result column="member_email" property="memberEmail" />
		<result column="age" property="age" />
		<result column="member_board_count" property="memberBoardCount" />
	</resultMap>
	
	<resultMap type="memberLikes" id="memberLikesMap">
		<result column="no" property="no" />
		<result column="member_id" property="memberId" />
		<result column="content_id" property="contentId" />
		<result column="content_festival_id" property="contentFestivalId" />
		<result column="content_title" property="contentTitle" />
	</resultMap>
	
	<resultMap type="memberLoves" id="memberLovesMap">
		<result column="no" property="no" />
		<result column="member_no" property="memberNo" />
		<result column="board_no" property="boardNo" />
	</resultMap>
	
	<insert id="insertMemberLoves" parameterType="memberLoves">
		insert into members_loves(member_no, board_no)
		values (#{memberNo}, #{boardNo})
	</insert>
	
	<delete id="deleteMemberLoves" parameterType="memberLoves">
		delete
		  from members_loves
		 where board_no = #{boardNo} and member_no = {#memberNo}
	</delete>
	
	<delete id="deleteMemberLovesAll" parameterType="int">
		delete
		  from members_loves
		 where member_no = #{memberNo}
	</delete>
	
	<select id="selectMemberLoveListOne" parameterType="memberLoves" resultMap="memberLovesMap">
		select no, member_no, board_no
		  from members_loves
		 where board_no = #{boardNo} and member_no = {#memberNo} 
	</select>
	
	<select id="selectMemberLoveListBoardNo" parameterType="int" resultType="int">
		select board_no
		  from members_loves
		 where member_no = #{memberNo}
	</select>
	
	<select id="memberLikeList" parameterType="map" resultType="map">
		select no, member_id memberId, b.content_id contentId, content_type_id contentTypeId, b.title, addr1, first_image firstImage, latitude, longitude, event_start_date eventStartDate, event_end_date eventEndDate 
		from (select * from members_likes where member_id = #{memberId}) a 
		join 
		(select content_id, content_type_id, title, addr1, first_image, latitude, longitude, null as event_start_date, null as event_end_date from attraction_info where content_id in (select content_id from members_likes where member_id = #{memberId}) 
		union
		select content_id, content_type_id, title, addr1, first_image, latitude, longitude, event_start_date, event_end_date from attraction_festival where content_id in (select content_festival_id as content_id from members_likes where member_id = #{memberId})) b 
		on a.content_title = b.title;
	</select>
	
	<select id="memberLikeListOne" parameterType="map" resultMap="memberLikesMap">
		select no, member_id, content_id, content_festival_id, content_title
		  from members_likes
		 where member_id = #{memberId}
		 <if test="contentId">and content_id = #{contentId}</if>
		 <if test="contentFestivalId">and content_festival_id = #{contentFestivalId}</if>
	</select>
	
	<insert id="memberLikeInsert" parameterType="memberLikes">
		insert into members_likes(member_id, content_id, content_festival_id, content_title)
		values (#{memberId},
		<choose>
			<when test="contentId">#{contentId},</when>
			<otherwise>null,</otherwise>
		</choose>
		<choose>
			<when test="contentFestivalId">#{contentFestivalId},</when>
			<otherwise>null,</otherwise>
		</choose>		
		#{contentTitle})
	</insert>
	
	<delete id="memberLikeDelete" parameterType="memberLikes">
		delete from members_likes
		 where no = #{no}
	</delete>
	
	<delete id="deleteMemberLikes" parameterType="String">
		delete
		  from members_likes
		 where member_id = #{memberId}
	</delete>

	<insert id="registMember" parameterType="member">
		insert into members (member_id, member_pw, member_name, member_email, age)
		values (#{memberId}, #{memberPw}, #{memberName}, #{memberEmail}, #{age})
	</insert>
	
	<select id="loginMember" parameterType="member" resultMap="memberMap">
		select member_id, member_pw, member_name, join_date, member_email, age
		  from members
		 where member_id = #{memberId} and member_pw = #{memberPw}
	</select>
	
	<select id="memberInfo" parameterType="String" resultMap="memberMap">
		select member_no, member_id, member_pw, member_name, join_date, member_email, age, member_board_count
		  from members
		 where member_id = #{memberId}
	</select>
	
	<select id="detailMember" parameterType="String" resultMap="memberMap">
		select member_no, member_id, member_pw, member_name, , member_email, age, member_board_count
		  from members
		 where member_id = #{memberId}
	</select>
	
	<update id="updateMember" parameterType="member">
		update members
		<trim prefix="set" suffixOverrides=",">
			<if test="memberPw != null">member_pw = #{memberPw},</if>
			<if test="memberName != null">member_name = #{memberName},</if>
			<if test="memberEmail != null">member_email = #{memberEmail},</if>
			<if test="age != null">age = #{age},</if>
		</trim>
		 where member_id = #{memberId}
	</update>
	
	<delete id="deleteMember" parameterType="String">
		delete 
		  from members
		 where member_id = #{memberId}
	</delete>
	
	<update id="saveRefreshToken" parameterType="map">
		update members
		set token = #{token}
		where member_id = #{memberId}
	</update>
	
	<select id="getRefreshToken" parameterType="string" resultType="string">
		select token
		from members
		where member_id = #{memberId}
	</select>
	
	<update id="deleteRefreshToken" parameterType="map">
		update members
		set token = #{token, jdbcType=VARCHAR}
		where member_id = #{memberId}
	</update>
	

</mapper>
