<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.enjoytrip.attraction.model.mapper.AttractionMapper">

	<resultMap type="Attraction" id="AttractionMap">
		<result column="content_id" property="contentId" />
		<result column="content_type_id" property="contentTypeId"/>
		<result column="title" property="title"/>
		<result column="addr1" property="addr1"/>
		<result column="tel" property="tel"/>
		<result column="first_image" property="firstImage"/>
		<result column="sido_code" property="sidoCode"/>
		<result column="gugun_code" property="gugunCode"/>
		<result column="latitude" property="latitude"/>
		<result column="longitude" property="longitude"/>
	</resultMap>
	
	<resultMap type="AttractionFestival" id="AttractionFestivalMap">
		<result column="content_id" property="contentId" />
		<result column="content_type_id" property="contentTypeId"/>
		<result column="title" property="title"/>
		<result column="addr1" property="addr1"/>
		<result column="addr2" property="addr2"/>
		<result column="tel" property="tel"/>
		<result column="first_image" property="firstImage"/>
		<result column="sido_code" property="sidoCode"/>
		<result column="gugun_code" property="gugunCode"/>
		<result column="latitude" property="latitude"/>
		<result column="longitude" property="longitude"/>
		<result column="mlevel" property="mlevel" />
		<result column="event_start_date" property="eventStartDate" />
		<result column="event_end_date" property="eventEndDate" />
	</resultMap>
	
	<select id="detailAttraction" parameterType="map" resultMap="AttractionFestivalMap">
		<if test="contentTypeId == 15">
			select content_id, content_type_id, title, addr1, tel, first_image, sido_code, gugun_code, latitude, longitude, mlevel, event_start_date, event_end_date
		  	  from attraction_festival
		</if>
		<if test="contentTypeId != 15">
			select content_id, content_type_id, title, addr1, tel, first_image, sido_code, gugun_code, latitude, longitude
		  	  from attraction_info
		</if>
		where content_id = #{contentId}; 
	</select>
	
	<select id="listAttractionFestival" parameterType="int" resultMap="AttractionFestivalMap">
		select content_id, content_type_id, title, addr1, tel, first_image, sido_code, gugun_code, latitude, longitude, mlevel, event_start_date, event_end_date
		  from attraction_festival
		 where sido_code = #{sidoCode} and first_image != ""
		 limit 30
	</select>
	
	<select id="listAttractionFood" parameterType="int" resultMap="AttractionFestivalMap">
		select content_id, content_type_id, title, addr1, tel, first_image, sido_code, gugun_code, latitude, longitude
		  from attraction_info
		 where sido_code = #{sidoCode} and content_type_id = 39 and first_image != ""
		 limit 30
	</select>
	
	<select id="listAttractionFamily" parameterType="int" resultMap="AttractionFestivalMap">
		select content_id, content_type_id, title, addr1, tel, first_image, sido_code, gugun_code, latitude, longitude
		  from attraction_info
		 where content_type_id != 39 and content_type_id != 15 and sido_code = #{sidoCode} and first_image != "" and title regexp '박물관|미술관|동물원|식물원|역사|놀이|캠핑|문화|체험|바다|해변|어린이|가족|학습'
		 limit 30 
	</select>
	
	<insert id="insertAttractionFestival" parameterType="AttractionFestival">
		insert into attraction_festival (content_id, content_type_id, title, addr1, addr2, tel, first_image, sido_code, gugun_code, latitude, longitude, mlevel, event_start_date, event_end_date)
		values (#{contentId}, #{contentTypeId}, #{title}, #{addr1}, #{addr2}, #{tel}, #{firstImage}, #{sidoCode}, #{gugunCode}, #{latitude}, #{latitude}, #{mlevel}, #{eventStartDate}, #{eventEndDate})
	</insert>
	
</mapper>
<!-- 
package com.ssafy.enjoytrip.food.model.mapper;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.ssafy.enjoytrip.food.model.FoodDto;
import com.ssafy.util.DBUtil;

public class FoodDaoImpl implements FoodDao {
	double nowLat = 36.355215;
	double nowLong = 127.298022;
	
	private DBUtil db;
	private static FoodDao instance = new FoodDaoImpl();
	private FoodDaoImpl() {
		db = DBUtil.getInstance();
	}
	public static FoodDao getInstance() {
		return instance;
	}
	@Override
	public List<FoodDto> listFood(int areaCode, int foodCode) throws SQLException {
		List<FoodDto> list = new ArrayList<>();
		if (areaCode >= 9) areaCode += 22;
		try (
				Connection con = db.getConnection();
				PreparedStatement stmt = con.prepareStatement(
					"select title, addr1, first_image, latitude, longitude "
				  + "  from attraction_info "
				  + " where content_type_id = 39 and sido_code = ? "
				  + " limit 30"
				);
			) {
				int index = 1;
				stmt.setInt(index++, areaCode);
//				stmt.setInt(index++, foodCode);
				ResultSet rs = stmt.executeQuery();
				while(rs.next()) {
					FoodDto foodDto = new FoodDto();
					foodDto.setTitle(rs.getString("title"));
					foodDto.setAddress(rs.getString("addr1"));
					foodDto.setImage(rs.getString("first_image"));
					
					double latitude = rs.getDouble("latitude");
					double longtitude = rs.getDouble("longitude");

					
					foodDto.setMapx(latitude);
					foodDto.setMapy(longtitude);
					
					foodDto.setAreaCode(areaCode);
					
					double distance = Haversine(latitude, longtitude, nowLat, nowLong);
					foodDto.setDistance(Math.round(distance * 100) / 100.0); // 둘째자리까지

					foodDto.setFoodCode(foodCode);
					list.add(foodDto);
				}	
			}
		return list;
	}
	
	public static double Haversine(double x1, double y1, double x2, double y2) {
	    double distance;
	    double radius = 6371; // 지구 반지름(km)
	    double toRadian = Math.PI / 180;

	    double deltaLatitude = Math.abs(x1 - x2) * toRadian;
	    double deltaLongitude = Math.abs(y1 - y2) * toRadian;

	    double sinDeltaLat = Math.sin(deltaLatitude / 2);
	    double sinDeltaLng = Math.sin(deltaLongitude / 2);
	    double squareRoot = Math.sqrt(
	        sinDeltaLat * sinDeltaLat +
	        Math.cos(x1 * toRadian) * Math.cos(x2 * toRadian) * sinDeltaLng * sinDeltaLng);

	    distance = 2 * radius * Math.asin(squareRoot);

	    return distance;
	}
} -->